// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dkg/dkg/dispute.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Dispute struct {
	AddressOfAccuser []byte  `protobuf:"bytes,1,opt,name=AddressOfAccuser,proto3" json:"AddressOfAccuser,omitempty"`
	AddressOfAccusee []byte  `protobuf:"bytes,2,opt,name=AddressOfAccusee,proto3" json:"AddressOfAccusee,omitempty"`
	Share            *Share  `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	Commit           *Commit `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Kij              []byte  `protobuf:"bytes,5,opt,name=kij,proto3" json:"kij,omitempty"`
	//bytes zkProof = 6;
	CZkProof []byte `protobuf:"bytes,6,opt,name=cZkProof,proto3" json:"cZkProof,omitempty"`
	RZkProof []byte `protobuf:"bytes,7,opt,name=rZkProof,proto3" json:"rZkProof,omitempty"`
	Id       uint64 `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa9d5f9ea0c003b, []int{0}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetAddressOfAccuser() []byte {
	if m != nil {
		return m.AddressOfAccuser
	}
	return nil
}

func (m *Dispute) GetAddressOfAccusee() []byte {
	if m != nil {
		return m.AddressOfAccusee
	}
	return nil
}

func (m *Dispute) GetShare() *Share {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *Dispute) GetCommit() *Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *Dispute) GetKij() []byte {
	if m != nil {
		return m.Kij
	}
	return nil
}

func (m *Dispute) GetCZkProof() []byte {
	if m != nil {
		return m.CZkProof
	}
	return nil
}

func (m *Dispute) GetRZkProof() []byte {
	if m != nil {
		return m.RZkProof
	}
	return nil
}

func (m *Dispute) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Dispute)(nil), "dkg.dkg.Dispute")
}

func init() { proto.RegisterFile("dkg/dkg/dispute.proto", fileDescriptor_baa9d5f9ea0c003b) }

var fileDescriptor_baa9d5f9ea0c003b = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xc9, 0x4e, 0xd7,
	0x07, 0xe3, 0xcc, 0xe2, 0x82, 0xd2, 0x92, 0x54, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xf6,
	0x94, 0xec, 0x74, 0xbd, 0x94, 0xec, 0x74, 0x29, 0x11, 0x98, 0x7c, 0x72, 0x7e, 0x6e, 0x6e, 0x66,
	0x09, 0x44, 0x5a, 0x4a, 0x18, 0x26, 0x5a, 0x9c, 0x91, 0x58, 0x04, 0xd5, 0xa3, 0xd4, 0xc5, 0xc4,
	0xc5, 0xee, 0x02, 0x31, 0x45, 0x48, 0x8b, 0x4b, 0xc0, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0xd8,
	0x3f, 0xcd, 0x31, 0x39, 0xb9, 0xb4, 0x38, 0xb5, 0x48, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x08,
	0x43, 0x1c, 0x8b, 0xda, 0x54, 0x09, 0x26, 0xac, 0x6a, 0x53, 0x85, 0x54, 0xb8, 0x58, 0xc1, 0x56,
	0x4a, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x1b, 0xf1, 0xe9, 0x41, 0xdd, 0xa9, 0x17, 0x0c, 0x12, 0x0d,
	0x82, 0x48, 0x0a, 0xa9, 0x73, 0xb1, 0x41, 0x9c, 0x2b, 0xc1, 0x02, 0x56, 0xc6, 0x0f, 0x57, 0xe6,
	0x0c, 0x16, 0x0e, 0x82, 0x4a, 0x0b, 0x09, 0x70, 0x31, 0x67, 0x67, 0x66, 0x49, 0xb0, 0x82, 0x6d,
	0x03, 0x31, 0x85, 0xa4, 0xb8, 0x38, 0x92, 0xa3, 0xb2, 0x03, 0x8a, 0xf2, 0xf3, 0xd3, 0x24, 0xd8,
	0xc0, 0xc2, 0x70, 0x3e, 0x48, 0xae, 0x08, 0x26, 0xc7, 0x0e, 0x91, 0x83, 0xf1, 0x85, 0xf8, 0xb8,
	0x98, 0x32, 0x53, 0x24, 0x38, 0x14, 0x18, 0x35, 0x58, 0x82, 0x98, 0x32, 0x53, 0x9c, 0x34, 0x4f,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x1f, 0x14, 0x6e, 0x15, 0xe0, 0xd0,
	0x2b, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x07, 0x9f, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x13, 0xa7, 0x3f, 0x7c, 0x8b, 0x01, 0x00, 0x00,
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RZkProof) > 0 {
		i -= len(m.RZkProof)
		copy(dAtA[i:], m.RZkProof)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.RZkProof)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CZkProof) > 0 {
		i -= len(m.CZkProof)
		copy(dAtA[i:], m.CZkProof)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.CZkProof)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Kij) > 0 {
		i -= len(m.Kij)
		copy(dAtA[i:], m.Kij)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Kij)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Share != nil {
		{
			size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDispute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddressOfAccusee) > 0 {
		i -= len(m.AddressOfAccusee)
		copy(dAtA[i:], m.AddressOfAccusee)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.AddressOfAccusee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressOfAccuser) > 0 {
		i -= len(m.AddressOfAccuser)
		copy(dAtA[i:], m.AddressOfAccuser)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.AddressOfAccuser)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressOfAccuser)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.AddressOfAccusee)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.Share != nil {
		l = m.Share.Size()
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.Kij)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.CZkProof)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.RZkProof)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDispute(uint64(m.Id))
	}
	return n
}

func sovDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispute(x uint64) (n int) {
	return sovDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressOfAccuser", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressOfAccuser = append(m.AddressOfAccuser[:0], dAtA[iNdEx:postIndex]...)
			if m.AddressOfAccuser == nil {
				m.AddressOfAccuser = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressOfAccusee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressOfAccusee = append(m.AddressOfAccusee[:0], dAtA[iNdEx:postIndex]...)
			if m.AddressOfAccusee == nil {
				m.AddressOfAccusee = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Share == nil {
				m.Share = &Share{}
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &Commit{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kij", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kij = append(m.Kij[:0], dAtA[iNdEx:postIndex]...)
			if m.Kij == nil {
				m.Kij = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CZkProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CZkProof = append(m.CZkProof[:0], dAtA[iNdEx:postIndex]...)
			if m.CZkProof == nil {
				m.CZkProof = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RZkProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RZkProof = append(m.RZkProof[:0], dAtA[iNdEx:postIndex]...)
			if m.RZkProof == nil {
				m.RZkProof = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispute = fmt.Errorf("proto: unexpected end of group")
)
